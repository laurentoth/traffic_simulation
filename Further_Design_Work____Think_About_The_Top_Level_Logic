Assume the following constant values as codes for information:
  SOUTHWARD has the value 0
  EASTWARD has the value 1                          ALSO: Each lane has
  NORTHWARD has the value 2                         the same coordinates as 
  WESTWARD has the value 3                          the intersection it aims at.
Also:
  NEVER_TURN has the value 0
  TURN_RIGHTWARD has the value 1
  TURN_LEFTWARD has the value -1

For simplicity (and since only the top-level logic is being tested),
here are some of the eventually-specified things not tested at this
stage of the Object-Oriented Design work:
  - a car must remain in a lane for a certain length of time
  - a car can never move through an intersection within the same time-step
      that the car begins to move through the intersection
  - a lane has a maximum capacity of cars

WITHOUT DOING ANY ACTUAL PROGRAMMING, 
consider the top-level logic that would enable input like that shown below to 
result in output like that also shown below.  That input and output were not 
requested by the client, and are examples of things analogous to the scaffolding
outside a building that construction engineers use when a building is 
constructed, that is, as temporary work that enables more permanent work to 
be successful.


--- BEGIN sample input for tester program to test feasibility of top-level logic
numIntersectionsInOneDirection:
2
number of cars created for the test:
6
car number:
1
born in the lane that is positioned at col:
2
born in the lane that is positioned at row:
2
born in the lane that is oriented in direction:
0
additional blocks to travel prior to turning (-1 means the car will never turn):
-1 
direction the car will turn, when the car turns:
0
car number:
2
born in the lane that is positioned at col:
1
born in the lane that is positioned at row:
2
born in the lane that is oriented in direction:
3
additional blocks to travel prior to turning (-1 means the car will never turn):
-1 
direction the car will turn, when the car turns:
0
car number:
3
born in the lane that is positioned at col:
1
born in the lane that is positioned at row:
2
born in the lane that is oriented in direction:
2
additional blocks to travel prior to turning (-1 means the car will never turn):
0 
direction the car will turn, when the car turns:
1
car number:
4
born in the lane that is positioned at col:
1
born in the lane that is positioned at row:
1
born in the lane that is oriented in direction:
1
additional blocks to travel prior to turning (-1 means the car will never turn):
1 
direction the car will turn, when the car turns:
1
car number:
5
born in the lane that is positioned at col:
2
born in the lane that is positioned at row:
1
born in the lane that is oriented in direction:
2
additional blocks to travel prior to turning (-1 means the car will never turn):
1 
direction the car will turn, when the car turns:
-1
car number:
6
born in the lane that is positioned at col:
2
born in the lane that is positioned at row:
1
born in the lane that is oriented in direction:
0
additional blocks to travel prior to turning (-1 means the car will never turn):
0 
direction the car will turn, when the car turns:
-1
--- END sample input for tester program to test feasibility of top-level logic



Explanation to students: Here's a picture of the grid, with the car numbers 
to the right of (or above) the lane the car is "born" into, where the
psuedocode notation i[col, row] denotes an instance of Intersection:

              |    ^             |1   ^
              v    |             v    |
                           2
         <-               <-                 <-
row 2:        i[1,2]             i[2,2]
   
         ->               ->                 ->
   
              |    ^             |6   ^
              v    |3            v    | 
   
         <-               <-                 <-
row 1:        i[1,1]             i[2,1]
         4
         ->               ->                 ->
              |    ^             |    ^
              v    |             v    |5

col:             1                  2

DO NOT CONSIDER HOW pictures of the grid (like that above and like those shown 
below) might be generated by the tester-of_top-level-logic  program, instead 
focus on how the tester program could achieve the other outputs indicated.

REMINDER: DO NOT DO ANY ACTUAL PROGRAMMING.

--- BEGIN sample output of tester program for the input shown earlier

At the intersection located at col 1 and row 1 
  incoming lane having direction SOUTHWARD is empty
  incoming lane having direction EASTWARD is nonempty
   car#4 is removed and placed into outgoing lane having direction EASTWARD
  incoming lane having direction NORTHWARD is empty
  incoming lane having direction WESTWARD is empty 
  outgoing lane having direction SOUTHWARD is empty
  outgoing lane having direction EASTWARD is nonempty
  outgoing lane having direction NORTHWARD is nonempty
  outgoing lane having direction WESTWARD is empty

              |    ^             |1   ^
              v    |             v    |
                           2
         <-               <-                 <-
row 2:        i[1,2]             i[2,2]
   
         ->               ->                 ->
   
              |    ^             |6   ^
              v    |3            v    | 
   
         <-               <-                 <-
row 1:        i[1,1]             i[2,1]
                          4 
         ->               ->                 ->
              |    ^             |    ^
              v    |             v    |5

col:             1                  2

At the intersection located at col 2 and row 1 
  incoming lane having direction SOUTHWARD is nonempty and
   car#6 is removed and placed into outgoing lane having direction EASTWARD
   car#6 leaves the grid
  incoming lane having direction EASTWARD is nonempty and
   car#4 is removed and placed into outgoing lane having direction SOUTHWARD
   car#4 leaves the grid
  incoming lane having direction NORTHWARD is nonempty and
   car#5 is removed and placed into outgoing lane having direction NORTHWARD
  incoming lane having direction WESTWARD is empty 
  outgoing lane having direction SOUTHWARD is nonempty
  outgoing lane having direction EASTWARD is nonempty
  outgoing lane having direction NORTHWARD is nonempty
  outgoing lane having direction WESTWARD is empty

              |    ^             |1   ^
              v    |             v    |
                           2
         <-               <-                 <-
row 2:        i[1,2]             i[2,2]
   
         ->               ->                 ->
   
              |    ^             |    ^
              v    |3            v    |5 
   
         <-               <-                 <-
row 1:        i[1,1]             i[2,1]
                                             6 
         ->               ->                 ->
              |    ^             |4   ^
              v    |             v    |

col:             1                  2

At the intersection located at col 1 and row 2 
  incoming lane having direction SOUTHWARD is empty 
  incoming lane having direction EASTWARD is empty 
  incoming lane having direction NORTHWARD is nonempty and
   car#3 is removed and placed into outgoing lane having direction EASTWARD
  incoming lane having direction WESTWARD is nonempty and
   car#2 is removed and placed into outgoing lane having direction WESTWARD
   car#2 leaves the grid
  outgoing lane having direction SOUTHWARD is empty
  outgoing lane having direction EASTWARD is nonempty
  outgoing lane having direction NORTHWARD is empty
  outgoing lane having direction WESTWARD is nonempty

              |    ^             |1   ^
              v    |             v    |
          2                 
         <-               <-                 <-
row 2:        i[1,2]             i[2,2]
                          3 
         ->               ->                 ->
   
              |    ^             |    ^
              v    |             v    |5
   
         <-               <-                 <-
row 1:        i[1,1]             i[2,1]
                                             6
         ->               ->                 ->
              |    ^             |4   ^
              v    |             v    | 

col:             1                  2

At the intersection located at col 2 and row 2 
  incoming lane having direction SOUTHWARD is nonempty and
   car#1 is removed and placed into outgoing lane having direction SOUTHWARD
  incoming lane having direction EASTWARD is nonempty and
   car#3 is removed and placed into outgoing lane having direction EASTWARD
   car#3 leaves the grid
  incoming lane having direction NORTHWARD is nonempty and
   car#5 is removed and placed into outgoing lane having direction WESTWARD
  incoming lane having direction WESTWARD is empty
  outgoing lane having direction SOUTHWARD is nonempty
  outgoing lane having direction EASTWARD is nonempty
  outgoing lane having direction NORTHWARD is empty
  outgoing lane having direction WESTWARD is nonempty

              |    ^             |    ^
              v    |             v    |
          2                5
         <-               <-                 <-
row 2:        i[1,2]             i[2,2]
                                             3 
         ->               ->                 ->
   
              |    ^             |1   ^
              v    |             v    | 
   
         <-               <-                 <-
row 1:        i[1,1]             i[2,1]
                                             6
         ->               ->                 ->
              |    ^             |4   ^
              v    |             v    | 

col:             1                  2

--- END sample output of tester program for the input shown earlier
